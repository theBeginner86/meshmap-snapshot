name: 'MeshMap-Snapshot'
description: 'Walks in application and takes a shot of your infrastructure using Meshery Extension MeshMap'
author: Layer5
inputs:
  designID: 
    description: "The design uuid, example: 3c116d0a-49ea-4294-addc-d9ab34210662"
    required: false
  applicationId:  #deprecated
    description: "The application uuid, example: 3c116d0a-49ea-4294-addc-d9ab34210662"
    required: false
  githubToken:
    description: "Github PAT token"
    required: true
  providerToken:
    description: "Meshery Authentication Provider Token"
    required: true
  prNumber:
    description: "The Pull request on which comment has to be made"
    required: false
    default: "0"
  filePath: 
    description: "The relative filepath of the location where the manifests are stored"
    required: false
  application_type:
    description: "Application upload type, any of the three, Kubernetes Manifest, Docker Compose, Helm Chart"
    required: true
  application_url:
    description: "Application's source url where the manifests or data is stored"
    required: false
  skipComment:
    default: "false"
    description: "Skip the step of commenting on the PR when the action is invoked not for any specific PR or commit but dispatched manually for eg: as part of publishing catalog."
  assetLocation:
    required: false
    description: Remote location where the generated asset (screenshot) for the design will be stored.
outputs:
  mardownResult: # id of output
    description: 'The markdown result'
  resource_url: 
    description: "The URL of the generated resource."
    value: ${{ steps.outputurl.outputs.RESOURCE_URL }}      
runs:
  using: "composite"
  steps:
    - name: ping playground
      id: ping-playground
      run: |
        echo "IS_PLAYGROUND_RUNNING=$( echo $(./action/playground-ping.sh))" >> "$GITHUB_OUTPUT"
      shell: bash
    - run: echo $IS_PLAYGROUND_RUNNING
      shell: bash
    - name: set active cluster URL as playground
      if: ${{ steps.ping-playground.outputs.IS_PLAYGROUND_RUNNING }}
      run: echo "MESHERY_URL=https://playground.meshery.io" >> $GITHUB_ENV
      shell: bash
    - name: set active cluster URL as localhost:9081
      if: ${{ !steps.ping-playground.outputs.IS_PLAYGROUND_RUNNING }}
      run: echo "MESHERY_URL=http://127.0.0.1:9081" >> $GITHUB_ENV
      shell: bash
    - name: Create k8s Kind Cluster
      if: ${{ !steps.ping-playground.outputs.IS_PLAYGROUND_RUNNING }}
      uses: helm/kind-action@v1.7.0
      with:
        cluster_name: "kind-cluster"
    - run: echo ${{ steps.ping-playground.outputs.IS_PLAYGROUND_RUNNING }}
      shell: bash
    - run: 
      working-directory: action/cypress-action/
      if: ${{ !steps.ping-playground.outputs.IS_PLAYGROUND_RUNNING }}
      shell: bash
    - run: |
        FILE_PATH=${{ inputs.filePath }} ./action/manifest-merger.sh # creates file in root dir
        cat "__intermediate_file.yml" # debug
      if: ${{ inputs.filePath }}
      shell: bash
    - run: |
        echo "Uploading using application file"
        echo "hello1"
        cat "__intermediate_file.yml"
        echo "hello2"
        cat __intermediate_file.yml
        echo "hello3"
        ./action/uploadApplicationFile.sh
        echo "hello4"
        AppId=$(MESHERY_SERVER_BASE_URL="https://playground.meshery.io" UPLOAD_TYPE="${{inputs.application_type}}" PROVIDER_TOKEN=${{ inputs.providerToken }}  ./action/uploadApplicationFile.sh)
        AppId=$(echo "$AppId" | sed 's/"//g')
        echo "APPLICATION_ID=$AppId" >> $GITHUB_ENV
      if: ${{ inputs.filePath && !inputs.designID }}
      shell: bash
    - run: |
        echo "Uploading using application url"
        AppId=$(MESHERY_SERVER_BASE_URL="https://playground.meshery.io" UPLOAD_TYPE="${{inputs.application_type}}" PROVIDER_TOKEN=${{ inputs.providerToken }} UPLOAD_URL=${{ inputs.application_url }}  ./action/uploadApplicationUrl.sh)
        AppId=$(echo "$AppId" | sed 's/"//g')
        echo "APPLICATION_ID=$AppId" >> $GITHUB_ENV
      if: ${{ inputs.application_url && !inputs.designID }}
      shell: bash
    - run: |
        echo "Uploading using design id"
        echo ${{ inputs.designID }}
        echo "APPLICATION_ID=${{ inputs.designID }}" >> $GITHUB_ENV
      if: ${{ inputs.designID }}
      shell: bash
    - run: echo $APPLICATION_ID && echo ${{env.APPLICATION_ID}}
      shell: bash
    - name: Cypress run
      uses: cypress-io/github-action@v4
      with:
        working-directory: action/cypress-action
        spec: cypress/e2e/e2e/**/*
        browser: chrome 
        # record: true
      env:
        GITHUB_TOKEN: ${{ inputs.githubToken }}
        CYPRESS_token: ${{ inputs.providerToken }}
        CYPRESS_releasetag: ${{env.tag}}
        CYPRESS_applicationId: ${{ env.APPLICATION_ID }}
        # CYPRESS_RECORD_KEY: ${{ inputs.cypressRecordKey }}
    - run: ls
      shell: bash
    - run: tree action/cypress-action/cypress/ -L 2me
      shell: bash
    - name: Upload Cypress artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cypress-ss
        path: action/cypress-action/cypress/videos
    - name: Upload Cypress artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cypress-ss
        path: action/cypress-action/cypress/screenshots
    - run:  echo "SCREENSHOT_NAME=$(ls)" >> $GITHUB_ENV # Assumption: There is only one screenshot in the download directory
      working-directory: action/cypress-action/cypress/downloads
      shell: bash
    - run: mv "$SCREENSHOT_NAME" screenshot.png
      working-directory: action/cypress-action/cypress/downloads
      shell: bash
    - run: node --version
      shell: bash
    - run: npm ci
      working-directory: action/node-file-upload
      shell: bash
    - id: outputurl
      run: |
        PROVIDER_TOKEN=${{inputs.providerToken}} assetLocation=${{ inputs.assetLocation }} node node-file-upload/index.js > __fileResponse.txt  
        outputstr=$(head -n 1  __fileResponse.txt)
        required_string="https"
        echo $outputstr
        echo ${{inputs.prNumber}}
        if [[ "$outputstr" == "$required_string"* ]]; then
            echo "RESOURCE_URL=$outputstr" >> $GITHUB_ENV
            echo "RESOURCE_URL=$outputstr" >> $GITHUB_OUTPUT
        else
            echo "RESOURCE_URL=false" >> $GITHUB_ENV
        fi
      working-directory: action/
      shell: bash
    - name: Comment Success Status
      if: ${{ success() && inputs.skipComment == 'false' && inputs.prNumber != '0' && env.RESOURCE_URL != false }}
      uses: hasura/comment-progress@v2.2.0
      with:
        github-token: ${{ inputs.githubToken }}
        repository: ${{github.repository}}
        number: ${{ inputs.prNumber }}
        id: meshmap-snapshot
        message: '[<img src="${{env.RESOURCE_URL}}">](https://meshery.layer5.io/catalog/${{ env.APPLICATION_ID }})'
        append: false
